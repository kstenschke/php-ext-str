h1. ext/str

Set of utility functions for strings in PHP.

Started in 2011 by Martin Jansen, primarily for personal entertainment.
Extended in 2016 by Kay Stenschke.

Most of that stuff isn't tested that well (though there are unit tests available)
and the API and the behaviour of the functions is likely to change.  You have been warned.


h2. Functions

h3. str_startswith(haystack, needle, [case_insensitive]) : bool

Returns true if the string haystack starts with the substring needle. Returns false otherwise.

If the optional third parameter is set to true, the test is performed in a case-insensitive manner.


h3. str_endswith(haystack, needle, [case_insensitive]) : bool

Returns true if the string haystack ends with the substring needle. Returns false otherwise.

If the optional third parameter is set to true, the test is performed in a case-insensitive manner.


h3. str_contains(haystack, needle, [case_insensitive]) : bool

Returns true if the string haystack contains the substring needle. Returns false otherwise.

If the optional third parameter is set to true, the test is performed in a case-insensitive manner.


h3. str_isupper(input) : bool

Returns true if all cased characters in the given input string are uppercase and if the string contains at least one cased character. Returns false otherwise.


h3. str_islower(input) : bool

Returns true if all cased characters in the given input string are lowercase and if the string contains at least one cased character. Returns false otherwise.


h3. str_iswhitespace(input) : bool

Returns true if the given string is empty or contains whitespace characters only. Returns false otherwise.


h3. str_swapcase(input) : string

Returns the given string with uppercase characters converted to their lowercase representations and vice versa.


h3. str_wrap(lhs, input, rhs, [prevent_rewrap]) : string

Returns the given string wrapped with given left-hand-side and right-hand-side strings.
Optionally checks whether the given string already starts and ends with the given left- and right-hand-side wraps, returns the unaltered input string than.


h3. str_startsnumerical(haystack, [allow_negative]) : bool

Returns true if the given string starts with a number, or optionally a negative number. Returns false otherwise.


h3. str_intexplode(haystack, [delimiter]) : int[]

Splits the given string by the given delimiter (or default: ",") into integers.


h2. License

All the stuff in here is licensed under the New BSD License. See the
included LICENSE file for more info.  Have fun!


h2. Development notes


h3. Building

bc. $ phpize
$ ./configure
$ make -B

Should you run into issues regarding PHP's buildconf script at some point,
try forcing autoconf and autoheader to version 2.13.  (Make sure those are
installed, of course.)

bc. $ PHP_AUTOHEADER=autoheader213 PHP_AUTOCONF=autoconf213 ./buildconf

Not sure why those things still have to be so complicated in the 21st
century.


h3. Running the tests

bc. $ export TEST_PHP_EXECUTABLE=./sapi/cli/php
$ php run-tests.php ./ext/str/tests/


h2. TODO / ideas

* str_expandtabs(string) : string
* add options to str_intexplode - unique, positive
* str_random(length, alpha_lower, alpha_upper, numbers, special) : string
* str_reducecharrepetitions(string, char, max_repetitions) : string
* arr_strtolower - perform strtolower() on all items of given array
